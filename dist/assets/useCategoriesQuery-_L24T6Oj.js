import{u as l}from"./query-CmYTTArA.js";import{I as s,s as g}from"./index-8n21VcdY.js";const u={gift:s.gift,zap:s.bolt,building:s.building,star:s.star,trending_up:s.trendingUp,bar_chart:s.chart,shield:s.shield,smartphone:s.mobile},c=[{value:"crypto_exchange",label:"Crypto Exchanges",icon:s.building,description:"Cryptocurrency trading platforms"},{value:"prop_firm",label:"Prop Trading Firms",icon:s.trendingUp,description:"Proprietary trading companies"},{value:"multi_asset",label:"Multi-Asset Brokers",icon:s.chart,description:"Multi-asset trading platforms"},{value:"trading_tool",label:"Trading Tools",icon:s.bolt,description:"Trading software and tools"},{value:"stock_broker",label:"Stock Brokers",icon:s.shield,description:"Stock trading platforms"},{value:"forex_broker",label:"Forex Brokers",icon:s.mobile,description:"Foreign exchange trading platforms"}],d=async()=>{console.log("Fetching categories from categories table...");try{const{data:e,error:t}=await g.from("categories").select("*").eq("is_active",!0).order("sort_order",{ascending:!0});return t?(console.error("Categories Error:",t),[]):!e||e.length===0?(console.warn("No categories found in categories table, using defaults"),[]):(console.log("Categories loaded from database:",e.length,"categories"),e)}catch(e){return console.error("Failed to fetch categories:",e),[]}},y=()=>{const e=l({queryKey:["categories"],queryFn:d,staleTime:3e5,retry:(t,o)=>{var n,a,r;return console.log(`Categories query retry attempt ${t+1}`,o==null?void 0:o.message),(n=o==null?void 0:o.message)!=null&&n.includes('relation "categories" does not exist')?(console.log("Categories table not found - using fallback!"),!1):(a=o==null?void 0:o.message)!=null&&a.includes("permission")||(r=o==null?void 0:o.message)!=null&&r.includes("policy")?(console.log("Categories permission error - using fallback!"),!1):t<2},select:t=>{console.log("Processing categories...");const o={value:"all",label:"All Categories",icon:s.gift,description:"View all available deals and platforms"};let n=[];t&&t.length>0?(n=t.map(r=>({value:r.value,label:r.label,icon:u[r.icon_name]||s.star,description:r.description})),console.log("Using database categories:",n.length)):(n=c,console.log("Using fallback categories:",n.length));const a=[o,...n];return console.log("Final categories:",a.length,"total"),a}});return{...e,data:e.data||[{value:"all",label:"All Categories",icon:s.gift,description:"View all available deals and platforms"},...c],error:e.error,isLoading:e.isLoading,isError:e.isError,isFetching:e.isFetching}},b=e=>l({queryKey:["category-stats",(e==null?void 0:e.length)||0],queryFn:()=>{const t=new Map,o=e||[];return t.set("all",o.length),o.forEach(n=>{var r;const a=((r=n.company)==null?void 0:r.category)||n.category;a&&t.set(a,(t.get(a)||0)+1)}),console.log("Category stats calculated:",Object.fromEntries(t)),t},enabled:e&&e.length>0}),h=e=>l({queryKey:["category-info",(e==null?void 0:e.length)||0],queryFn:()=>{const t=new Map,n=(e||[]).reduce((a,r)=>{const i=r.category;return i&&(a[i]||(a[i]=[]),a[i].push(r.name)),a},{});return Object.entries(n).forEach(([a,r])=>{t.set(a,{companies:r,count:r.length})}),console.log("Category info calculated:",Object.fromEntries(t)),t},enabled:e&&e.length>0});export{b as a,h as b,y as u};
